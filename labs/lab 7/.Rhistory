group_by(State) %>%
filter(CBrequired_SY == 1) %>%
select(year, State, CBrequired_SY) %>%
summarize(Start = min(year)) %>%
arrange(Start)
union_treated <-  union %>% filter(!is.na(YearCBrequired))
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
treated_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union_treated,
control_group = "notyettreated")
# Note that we *cannot* fit this with control_group = "nevertreated" because there aren't any never-treateds
# Aggregate to get a single "ATT"
treated_att <- aggte(treated_attgt, type = "group")
treated_att
union_treated <-  union %>% filter(!is.na(YearCBrequired))
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
treated_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union_treated,
control_group = "")
union_treated <-  union %>% filter(!is.na(YearCBrequired))
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
treated_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union_treated,
control_group = "nevertreated")
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "notyettreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations, i.e., control_group = "nevertreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "nevertreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations, i.e., control_group = "nevertreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "notyettreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations, i.e., control_group = "nevertreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "nevertreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations, i.e., control_group = "nevertreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "notyettreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations or not yet treated, i.e., control_group = "nevertreated" or "notyettreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
union_treated <-  union %>% filter(!is.na(YearCBrequired))
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
treated_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union_treated,
control_group = "notyettreated")
# Note that we *cannot* fit this with control_group = "nevertreated" because there aren't any never-treateds
# Aggregate to get a single "ATT"
treated_att <- aggte(treated_attgt, type = "group")
treated_att
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "nevertreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations or not yet treated, i.e., control_group = "nevertreated" or "notyettreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
# Make a variable for how many years away a unit is from its treatment time (0 is the time of treatment initiation, -1 is the time *just* before treatment)
union <- union %>% mutate(yearFromCB = year - YearCBrequired)
# How many possible levels (among units that at some point take treatment)
table(union$yearFromCB)
# Make the never-treateds "infinity" (ensure that their dummy will be dropped as well)
union$yearFromCB[is.na(union$yearFromCB)] <- Inf
# Make the dummy variables using the factor syntax - make -1 the reference period
union$yearFromCBFactor <- relevel(as.factor(union$yearFromCB), ref="-1")
# Fit a regression to get the per-period tests
dyn_reg <- lm_robust(studteachratio ~ yearFromCBFactor, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg
# Make a variable for how many years away a unit is from its treatment time (0 is the time of treatment initiation, -1 is the time *just* before treatment)
union <- union %>% mutate(yearFromCB = year - YearCBrequired)
# How many possible levels (among units that at some point take treatment)
table(union$yearFromCB)
# Make the never-treateds "infinity" (ensure that their dummy will be dropped as well)
union$yearFromCB[is.na(union$yearFromCB)] <- Inf
# Make the dummy variables using the factor syntax - make -1 the reference period
union$yearFromCBFactor <- relevel(as.factor(union$yearFromCB), ref="0")
# Fit a regression to get the per-period tests
dyn_reg <- lm_robust(studteachratio ~ yearFromCBFactor, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg
# Make a variable for how many years away a unit is from its treatment time (0 is the time of treatment initiation, -1 is the time *just* before treatment)
union <- union %>% mutate(yearFromCB = year - YearCBrequired)
# How many possible levels (among units that at some point take treatment)
table(union$yearFromCB)
# Make the never-treateds "infinity" (ensure that their dummy will be dropped as well)
union$yearFromCB[is.na(union$yearFromCB)] <- Inf
# Make the dummy variables using the factor syntax - make -1 the reference period
union$yearFromCBFactor <- relevel(as.factor(union$yearFromCB), ref="-1")
# Fit a regression to get the per-period tests
dyn_reg <- lm_robust(studteachratio ~ yearFromCBFactor, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg
View(union)
knitr::opts_chunk$set(echo = TRUE)
# use packages
library(tidyverse)
library(estimatr)
library(haven)
options(digits=3)
# Make a variable for how many years away a unit is from its treatment time (0 is the time of treatment initiation, -1 is the time *just* before treatment)
union <- union %>% mutate(yearFromCB = year - YearCBrequired)
# How many possible levels (among units that at some point take treatment)
table(union$yearFromCB)
# Make the never-treateds "infinity" (ensure that their dummy will be dropped as well)
union$yearFromCB[is.na(union$yearFromCB)] <- Inf
# Make the dummy variables using the factor syntax - make -1 the reference period
union$yearFromCBFactor <- relevel(as.factor(union$yearFromCB), ref="-1")
# Fit a regression to get the per-period tests
dyn_reg <- lm_robust(studteachratio ~ yearFromCBFactor, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg
dyn_plot <- tidy(dyn_reg) %>% filter(!is.na(estimate)) %>% mutate(period = as.numeric(str_remove(term, fixed("yearFromCBFactor")))) %>%
select(period, estimate, conf.low, conf.high) %>% bind_rows(data.frame(period = -1, estimate = 0, conf.low=0, conf.high=0))
dyn_plot %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = 0.5, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot %>% filter(period >= -6&period<=10) %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -0.5, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot <- tidy(dyn_reg) %>% filter(!is.na(estimate)) %>% mutate(period = as.numeric(str_remove(term, fixed("yearFromCBFactor")))) %>%
select(period, estimate, conf.low, conf.high) %>% bind_rows(data.frame(period = -1, estimate = 0, conf.low=0, conf.high=0))
dyn_plot %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = 0, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot <- tidy(dyn_reg) %>% filter(!is.na(estimate)) %>% mutate(period = as.numeric(str_remove(term, fixed("yearFromCBFactor")))) %>%
select(period, estimate, conf.low, conf.high) %>% bind_rows(data.frame(period = -1, estimate = 0, conf.low=0, conf.high=0))
dyn_plot %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot %>% filter(period >= -6&period<=10) %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
# Make the dummy variables manually!
union$`treat-6` <- as.numeric(union$yearFromCBFactor == -6)
union$`treat-5` <- as.numeric(union$yearFromCBFactor == -5)
union$`treat-4` <- as.numeric(union$yearFromCBFactor == -4)
union$`treat-3` <- as.numeric(union$yearFromCBFactor == -3)
union$`treat-2` <- as.numeric(union$yearFromCBFactor == -2)
union$`treat-1` <- as.numeric(union$yearFromCBFactor == -1)
union$`treat0` <- as.numeric(union$yearFromCBFactor == 0)
union$`treat1` <- as.numeric(union$yearFromCBFactor == 1)
union$`treat2` <- as.numeric(union$yearFromCBFactor == 2)
union$`treat3` <- as.numeric(union$yearFromCBFactor == 3)
union$`treat4` <- as.numeric(union$yearFromCBFactor == 4)
union$`treat5` <- as.numeric(union$yearFromCBFactor == 5)
union$`treat6` <- as.numeric(union$yearFromCBFactor == 6)
union$`treat7` <- as.numeric(union$yearFromCBFactor == 7)
union$`treat8` <- as.numeric(union$yearFromCBFactor == 8)
union$`treat9` <- as.numeric(union$yearFromCBFactor == 9)
union$`treat10` <- as.numeric(union$yearFromCBFactor == 10)
# Fit a regression to get the per-period tests
dyn_reg_2 <- lm_robust(studteachratio ~ `treat-6` + `treat-5` + `treat-4` + `treat-3` +
`treat-2` + `treat-1` + `treat0` + `treat1` + `treat2` + `treat3` + `treat4` +
`treat5` + `treat6` + `treat7` + `treat8` + `treat9` + `treat10`, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg_2
# Messy data cleaning to make this into a coefficient plot
dyn_plot_2 <- tidy(dyn_reg_2) %>% filter(!is.na(estimate)) %>% mutate(term = str_remove_all(term, "`")) %>% mutate(period = as.numeric(str_remove(term, fixed("treat")))) %>%
select(period, estimate, conf.low, conf.high)
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -0.5, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
# Make the dummy variables manually!
union$`treat-6` <- as.numeric(union$yearFromCBFactor == -6)
union$`treat-5` <- as.numeric(union$yearFromCBFactor == -5)
union$`treat-4` <- as.numeric(union$yearFromCBFactor == -4)
union$`treat-3` <- as.numeric(union$yearFromCBFactor == -3)
union$`treat-2` <- as.numeric(union$yearFromCBFactor == -2)
union$`treat-1` <- as.numeric(union$yearFromCBFactor == -1)
union$`treat0` <- as.numeric(union$yearFromCBFactor == 0)
union$`treat1` <- as.numeric(union$yearFromCBFactor == 1)
union$`treat2` <- as.numeric(union$yearFromCBFactor == 2)
union$`treat3` <- as.numeric(union$yearFromCBFactor == 3)
union$`treat4` <- as.numeric(union$yearFromCBFactor == 4)
union$`treat5` <- as.numeric(union$yearFromCBFactor == 5)
union$`treat6` <- as.numeric(union$yearFromCBFactor == 6)
union$`treat7` <- as.numeric(union$yearFromCBFactor == 7)
union$`treat8` <- as.numeric(union$yearFromCBFactor == 8)
union$`treat9` <- as.numeric(union$yearFromCBFactor == 9)
union$`treat10` <- as.numeric(union$yearFromCBFactor == 10)
# Fit a regression to get the per-period tests
dyn_reg_2 <- lm_robust(studteachratio ~ `treat-6` + `treat-5` + `treat-4` + `treat-3` +
`treat-2` + `treat-1` + `treat0` + `treat1` + `treat2` + `treat3` + `treat4` +
`treat5` + `treat6` + `treat7` + `treat8` + `treat9` + `treat10`, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg_2
# Messy data cleaning to make this into a coefficient plot
dyn_plot_2 <- tidy(dyn_reg_2) %>% filter(!is.na(estimate)) %>% mutate(term = str_remove_all(term, "`")) %>% mutate(period = as.numeric(str_remove(term, fixed("treat")))) %>%
select(period, estimate, conf.low, conf.high)
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
View(union)
# Re-estimate the ATT_GTs but use a universal placebo period - by default it uses a moving period so you can do placebo tests for all pre-treatment periods - either is fine but the former is closest to standard practice with event-time plots
full_attgt_uni <- att_gt(yname = "studteachratio", tname = "year", idname = "Stateid", gname = "YearTreated", data= union, control_group = "notyettreated", base_period = "universal")
# Get the effects for each level of exposure (time since treatment) from our original att_gt estimates
full_dynamic <- aggte(full_attgt_uni, type = "dynamic")
ggdid(full_dynamic) + geom_vline(xintercept = 0, lty=2)
# Make the dummy variables manually!
union$`treat-6` <- as.numeric(union$yearFromCBFactor == -6)
union$`treat-5` <- as.numeric(union$yearFromCBFactor == -5)
union$`treat-4` <- as.numeric(union$yearFromCBFactor == -4)
union$`treat-3` <- as.numeric(union$yearFromCBFactor == -3)
union$`treat-2` <- as.numeric(union$yearFromCBFactor == -2)
union$`treat-1` <- as.numeric(union$yearFromCBFactor == -1)
union$`treat0` <- as.numeric(union$yearFromCBFactor == 0)
union$`treat1` <- as.numeric(union$yearFromCBFactor == 1)
union$`treat2` <- as.numeric(union$yearFromCBFactor == 2)
union$`treat3` <- as.numeric(union$yearFromCBFactor == 3)
union$`treat4` <- as.numeric(union$yearFromCBFactor == 4)
union$`treat5` <- as.numeric(union$yearFromCBFactor == 5)
union$`treat6` <- as.numeric(union$yearFromCBFactor == 6)
union$`treat7` <- as.numeric(union$yearFromCBFactor == 7)
union$`treat8` <- as.numeric(union$yearFromCBFactor == 8)
union$`treat9` <- as.numeric(union$yearFromCBFactor == 9)
union$`treat10` <- as.numeric(union$yearFromCBFactor == 10)
View(union)
# Fit a regression to get the per-period tests
dyn_reg_2 <- lm_robust(studteachratio ~ `treat-6` + `treat-5` + `treat-4` + `treat-3` +
`treat-2` + `treat-1` + `treat0` + `treat1` + `treat2` + `treat3` + `treat4` +
`treat5` + `treat6` + `treat7` + `treat8` + `treat9` + `treat10`, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg_2
# Messy data cleaning to make this into a coefficient plot
dyn_plot_2 <- tidy(dyn_reg_2) %>% filter(!is.na(estimate)) %>% mutate(term = str_remove_all(term, "`")) %>% mutate(period = as.numeric(str_remove(term, fixed("treat")))) %>%
select(period, estimate, conf.low, conf.high)
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
# use packages
library(tidyverse)
library(estimatr)
library(haven)
options(digits=3)
union <- read_dta("Paglayan Dataset.dta")
union <- union %>% filter(year >= 1959 & year <= 1997)
View(union)
# Starting point of collective laws
union %>%
group_by(State) %>%
filter(CBrequired_SY == 1) %>%
select(year, State, CBrequired_SY) %>%
summarize(Start = min(year)) %>%
arrange(Start)
library(panelView)
# Our treatment at time t variable (D_{it}) is "CBrequired_SY"
# The syntax for the index argument is to pass the name of the "unit" variable and the name of the "time" variable
# by.timing sorts the units by treatment initiation
# axis.adjust makes it so we can read the years (tilts them 45 degrees)
panelview(data = union, D = "CBrequired_SY", index = c("State", "year"), axis.adjust=T, by.timing=T)
# Drop WI and DC
union <- union %>% filter(State != "WI"&State!="DC")
# Student-teacher ratio
lm_robust(studteachratio ~ CBrequired_SY,
fixed_effects = ~ as.factor(year) + as.factor(State),
data=union,
cluster=State)
library(did)
# We pass in the first period when a unit takes treatment, coded as 0 for the never-treateds
union$YearTreated <- union$YearCBrequired
union$YearTreated[is.na(union$YearTreated)] <- 0
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
full_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union,
control_group = "notyettreated")
# Definitely read these warnings - it's hard to do inference with small groups!
# There are a lot of groups and a lot of group-time effects - it's kind of pointless to try to do inference on each one, so let's aggregate.
# we can also define the control group as the never treated observations or not yet treated, i.e., control_group = "nevertreated" or "notyettreated"
# Callaway and Sant'anna give a few different ways - "group" will estimate an average for each group and then average those groups
# other aggregation options
full_att <- aggte(full_attgt, type = "group")
full_att
union_treated <-  union %>% filter(!is.na(YearCBrequired))
# First estimate each group-time att_gt
# Note: for some reason they want a numeric idname
treated_attgt <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union_treated,
control_group = "notyettreated")
# Note that we *cannot* fit this with control_group = "nevertreated" because there aren't any never-treateds
# Aggregate to get a single "ATT"
treated_att <- aggte(treated_attgt, type = "group")
treated_att
# Make a variable for how many years away a unit is from its treatment time (0 is the time of treatment initiation, -1 is the time *just* before treatment)
union <- union %>% mutate(yearFromCB = year - YearCBrequired)
# Let's see what happens with California. 1976 is when collective law is implemented.
california <- union %>%
filter(State == "CA") %>%
select(State, year, CBrequired_SY, yearFromCB)
View(california)
# How many possible levels (among units that at some point take treatment)
table(union$yearFromCB)
# Make the never-treateds "infinity" (ensure that their dummy will be dropped as well)
union$yearFromCB[is.na(union$yearFromCB)] <- Inf
# Make the dummy variables using the factor syntax - make -1 the reference period
union$yearFromCBFactor <- relevel(as.factor(union$yearFromCB), ref="-1")
# Fit a regression to get the per-period tests
dyn_reg <- lm_robust(studteachratio ~ yearFromCBFactor,
fixed_effects = ~ as.factor(year) + as.factor(State),
data=union,
cluster=State)
dyn_reg
dyn_plot <- tidy(dyn_reg) %>%
filter(!is.na(estimate)) %>%
mutate(period = as.numeric(str_remove(term, fixed("yearFromCBFactor")))) %>%
select(period, estimate, conf.low, conf.high) %>%
bind_rows(data.frame(period = -1, estimate = 0, conf.low=0, conf.high=0))
dyn_plot %>%
ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) +
geom_point() + geom_pointrange() +
xlab("Time since treatment start") +
ylab("Estimated effect on student-teacher ratio") +
geom_vline(xintercept = -1, lty=2) +
geom_hline(yintercept = 0, lty=2) +
theme_bw()
dyn_plot %>%
filter(period >= -6 & period <= 10) %>%
ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) +
geom_point() + geom_pointrange() +
xlab("Time since treatment start") +
ylab("Estimated effect on student-teacher ratio") +
geom_vline(xintercept = -1, lty=2) +
geom_hline(yintercept = 0, lty=2) +
theme_bw()
# Make the dummy variables manually!
union$`treat-6` <- as.numeric(union$yearFromCBFactor == -6)
union$`treat-5` <- as.numeric(union$yearFromCBFactor == -5)
union$`treat-4` <- as.numeric(union$yearFromCBFactor == -4)
union$`treat-3` <- as.numeric(union$yearFromCBFactor == -3)
union$`treat-2` <- as.numeric(union$yearFromCBFactor == -2)
union$`treat-1` <- as.numeric(union$yearFromCBFactor == -1)
union$`treat0` <- as.numeric(union$yearFromCBFactor == 0)
union$`treat1` <- as.numeric(union$yearFromCBFactor == 1)
union$`treat2` <- as.numeric(union$yearFromCBFactor == 2)
union$`treat3` <- as.numeric(union$yearFromCBFactor == 3)
union$`treat4` <- as.numeric(union$yearFromCBFactor == 4)
union$`treat5` <- as.numeric(union$yearFromCBFactor == 5)
union$`treat6` <- as.numeric(union$yearFromCBFactor == 6)
union$`treat7` <- as.numeric(union$yearFromCBFactor == 7)
union$`treat8` <- as.numeric(union$yearFromCBFactor == 8)
union$`treat9` <- as.numeric(union$yearFromCBFactor == 9)
union$`treat10` <- as.numeric(union$yearFromCBFactor == 10)
# Fit a regression to get the per-period tests
dyn_reg_2 <- lm_robust(studteachratio ~ `treat-6` + `treat-5` + `treat-4` + `treat-3` +
`treat-2` + `treat-1` + `treat0` + `treat1` + `treat2` + `treat3` + `treat4` +
`treat5` + `treat6` + `treat7` + `treat8` + `treat9` + `treat10`, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg_2
# Messy data cleaning to make this into a coefficient plot
dyn_plot_2 <- tidy(dyn_reg_2) %>% filter(!is.na(estimate)) %>% mutate(term = str_remove_all(term, "`")) %>% mutate(period = as.numeric(str_remove(term, fixed("treat")))) %>%
select(period, estimate, conf.low, conf.high)
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
# Make the dummy variables manually!
union$`treat-6` <- as.numeric(union$yearFromCBFactor == -6)
union$`treat-5` <- as.numeric(union$yearFromCBFactor == -5)
union$`treat-4` <- as.numeric(union$yearFromCBFactor == -4)
union$`treat-3` <- as.numeric(union$yearFromCBFactor == -3)
union$`treat-2` <- as.numeric(union$yearFromCBFactor == -2)
union$`treat-1` <- as.numeric(union$yearFromCBFactor == -1)
union$`treat0` <- as.numeric(union$yearFromCBFactor == 0)
union$`treat1` <- as.numeric(union$yearFromCBFactor == 1)
union$`treat2` <- as.numeric(union$yearFromCBFactor == 2)
union$`treat3` <- as.numeric(union$yearFromCBFactor == 3)
union$`treat4` <- as.numeric(union$yearFromCBFactor == 4)
union$`treat5` <- as.numeric(union$yearFromCBFactor == 5)
union$`treat6` <- as.numeric(union$yearFromCBFactor == 6)
union$`treat7` <- as.numeric(union$yearFromCBFactor == 7)
union$`treat8` <- as.numeric(union$yearFromCBFactor == 8)
union$`treat9` <- as.numeric(union$yearFromCBFactor == 9)
union$`treat10` <- as.numeric(union$yearFromCBFactor == 10)
# Fit a regression to get the per-period tests
dyn_reg_2 <- lm_robust(studteachratio ~ `treat-6` + `treat-5` + `treat-4` + `treat-3` +
`treat-2` + `treat-1` + `treat0` + `treat1` + `treat2` + `treat3` + `treat4` +
`treat5` + `treat6` + `treat7` + `treat8` + `treat9` + `treat10`, fixed_effects = ~ as.factor(year) + as.factor(State),  data=union, cluster=State)
dyn_reg_2
# Messy data cleaning to make this into a coefficient plot
dyn_plot_2 <- tidy(dyn_reg_2) %>% filter(!is.na(estimate)) %>% mutate(term = str_remove_all(term, "`")) %>% mutate(period = as.numeric(str_remove(term, fixed("treat")))) %>%
select(period, estimate, conf.low, conf.high)
dyn_plot_2 %>% ggplot(aes(x=as.numeric(period), y = estimate, ymin=conf.low, ymax=conf.high)) + geom_point() + geom_pointrange() +
xlab("Time since treatment start") + ylab("Estimated effect on student-teacher ratio") + geom_vline(xintercept = -1, lty=2) + geom_hline(yintercept = 0, lty=2) +
theme_bw()
# Re-estimate the ATT_GTs but use a universal placebo period - by default it uses a moving period so you can do placebo tests for all pre-treatment periods - either is fine but the former is closest to standard practice with event-time plots
full_attgt_uni <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union, control_group = "notyettreated",
base_period = "universal")
# Get the effects for each level of exposure (time since treatment) from our original att_gt estimates
full_dynamic <- aggte(full_attgt_uni, type = "dynamic")
ggdid(full_dynamic) + geom_vline(xintercept = -1, lty=2)
# Re-estimate the ATT_GTs but use a universal placebo period - by default it uses a moving period so you can do placebo tests for all pre-treatment periods - either is fine but the former is closest to standard practice with event-time plots
full_attgt_uni <- att_gt(yname = "studteachratio",
tname = "year",
idname = "Stateid",
gname = "YearTreated",
data= union, control_group = "notyettreated",
base_period = "universal")
# Get the effects for each level of exposure (time since treatment) from our original att_gt estimates
full_dynamic <- aggte(full_attgt_uni, type = "dynamic")
ggdid(full_dynamic) + geom_vline(xintercept = -1, lty=2)
