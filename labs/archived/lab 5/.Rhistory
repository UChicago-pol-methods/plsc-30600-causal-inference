install.packages("formattable")
library(formattable)
# Indicador operaciones
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion)
print(porcentage)
}
indicador_operaciones(operaciones)
# Indicador operaciones
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
print(porcentage)
}
indicador_operaciones(operaciones)
# Indicador 2: operacional
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("hoa", porcentage)
print(output)
}
indicador_operaciones(operaciones)
# Indicador 2: operacional
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentage)
print(output)
}
indicador_operaciones(operaciones)
policy %>%
group_by(Year) %>%
summarize(Promedio = median(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE))
policy %>%
group_by(Year) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE))
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE))
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE),
Casos = nrow())
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE),
Casos = nrow(policy))
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE),
Casos = nrow(Promedio))
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE),
Casos = nrow())
policy %>%
filter(Year == 2021) %>%
summarize(Promedio = mean(`Cites in google scholar`, na.rm=TRUE),
Desviacion_St = sd(`Cites in google scholar`, na.rm=TRUE),
Casos = nrow(Year))
policy %>%
filter(Year == 2021) %>%
nrow()
# Indicador 1: políticas públicas
policy %>%
summarize(prom_2020 = sum(`Cites in google scholar`, na.rm=TRUE))
# Indicador 1: políticas públicas
policy %>%
summarize(prom_2020 = filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE))
policy %>%
summarize(prom_2020 = filter(Year == 2020))
policy %>%
group_by(Year) %>%
summarize(Promedio = sum(`Cites in google scholar`, na.rm=TRUE))
policy %>%
group_by(Year) %>%
summarize(Promedio = sum(`Cites in google scholar`, na.rm=TRUE)) %>%
summarize(Promedio[0,1])
policy %>%
group_by(Year) %>%
summarize(Promedio = sum(`Cites in google scholar`, na.rm=TRUE)) %>%
summarize(Promedio[0,0])
policy %>%
group_by(Year) %>%
summarize(Promedio = sum(`Cites in google scholar`, na.rm=TRUE)) %>%
summarize(Promedio[1,0])
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% sum((`Cites in google scholar`, na.rm=TRUE))
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE)
print(sum_2020)
}
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE)
sum_2021 <- input %>% filter(Year == 2021) %>% sum(`Cites in google scholar`, na.rm=TRUE)
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentaje)
print(output)
}
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE)
sum_2021 <- input %>% filter(Year == 2021) %>% sum(`Cites in google scholar`, na.rm=TRUE)
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentaje)
print(output)
}
indicador_politicas(policy)
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% sum("Cites in google scholar", na.rm=TRUE)
sum_2021 <- input %>% filter(Year == 2021) %>% sum(`Cites in google scholar`, na.rm=TRUE)
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentaje)
print(output)
}
indicador_politicas(policy)
input %>% filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE)
policy %>% filter(Year == 2020) %>% sum(`Cites in google scholar`, na.rm=TRUE)
policy %>%
filter(Year == 2020) %>%
sum(`Cites in google scholar`, na.rm = TRUE)
policy %>%
filter(Year == 2020) %>%
sum(`Cites in google scholar`)
policy %>%
filter(Year == 2020) %>%
sum(Year, na.rm = TRUE)
policy %>%
group_by(Year) %>%
summarize(Promedio = sum(`Cites in google scholar`, na.rm=TRUE))
policy %>%
group_by(Year) %>%
sum(`Cites in google scholar`, na.rm=TRUE)
policy %>%
sum(`Cites in google scholar`, na.rm=TRUE)
policy %>%
group_by(Year) %>%
summarize(sum(`Cites in google scholar`, na.rm=TRUE))
policy %>%
summarize(sum(`Cites in google scholar`, na.rm=TRUE))
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentaje)
print(output)
}
indicador_politicas(policy)
policy %>%
filter(Year == 2020) %>%
sum(Year, na.rm = TRUE)
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador operacional es de", porcentaje)
print(output)
}
indicador_politicas(policy)
policy %>%
group_by(Year) %>%
summarize(sum(`Cites in google scholar`, na.rm=TRUE))
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El puntaje del indicador de políticas públicas cambió en ", porcentaje)
print(output)
}
indicador_politicas(policy)
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El valor del indicador de políticas públicas cambió en", porcentaje)
print(output)
}
indicador_politicas(policy)
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El valor del indicador de políticas públicas cambió en", porcentaje, "entre los años 2020 y 2021")
print(output)
}
indicador_politicas(policy)
# Indicador 2: operacional
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("El valor del indicador operacional es de", porcentage, "para el año 2021")
print(output)
}
indicador_operaciones(operaciones)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(estimatr)
library(formattable)
policy <- read_excel("Prueba de Análisis de datos.xlsx", sheet = "Policy")
operaciones <- read_excel("Prueba de Análisis de datos.xlsx", sheet = "Operaciones")
# Indicador 1: políticas públicas
indicador_politicas <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El valor del indicador de políticas públicas cambió en", porcentaje, "entre los años 2020 y 2021")
print(output)
}
indicador_politicas(policy)
# Indicador 2: operacional
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("El valor del indicador operacional es de", porcentage, "para el año 2021")
print(output)
}
indicador_operaciones(operaciones)
# Indicador políticas públicas 2 (suma de citas)
indicador_politicas <- function(input){
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
output <- paste("El valor del indicador de políticas públicas cambió en", sum_2021, "citas entre los años 2020 y 2021")
print(output)
}
indicador_politicas(policy)
# Indicador políticas públicas 2 (suma de citas)
indicador_politicas <- function(input){
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
output <- paste("El valor del indicador de políticas públicas es de", sum_2021, "en el año 2021")
print(output)
}
indicador_politicas(policy)
# Indicador políticas públicas 2 (suma de citas)
indicador_politicas <- function(input){
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
output <- paste("El valor del indicador de políticas públicas asciende a", sum_2021, "en el año 2021")
print(output)
}
indicador_politicas(policy)
# Indicador políticas públicas 2 (cambio entre años)
indicador_politicas_2 <- function(input){
sum_2020 <- input %>% filter(Year == 2020) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
proporcion <- sum_2021/sum_2020
porcentaje <- percent(proporcion/100)
output <- paste("El valor del indicador de políticas públicas cambió en", porcentaje, "entre los años 2020 y 2021")
print(output)
}
indicador_politicas_2(policy)
# Indicador políticas públicas 1 (suma de citas)
indicador_politicas_1 <- function(input){
sum_2021 <- input %>% filter(Year == 2021) %>% summarize(sum(`Cites in google scholar`, na.rm=TRUE))
output <- paste("El valor del indicador de políticas públicas asciende a", sum_2021, "en el año 2021")
print(output)
}
indicador_politicas_1(policy)
# Indicador operacional
indicador_operaciones <- function(input){
proporcion <- input %>% summarize(Porc_gasto_publico = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("Respuesta: El valor del indicador operacional es de", porcentage, "para el año 2021")
print(output)
}
indicador_operaciones(operaciones)
tabla <- data_frame(Año = c("2021"),
Reputacional = c("480"),
Operacional = c("194 o 1.04%"),
Políticas = c("31.91%"))
tabla <- tibble(Año = c("2021"),
Reputacional = c("480"),
Operacional = c("194 o 1.04%"),
Políticas = c("31.91%"))
tabla
print(tabla)
head(tabla)
tabla <- tibble(Año = c("2021"),
Reputacional = c("480"),
Operacional = c("194 o 1.04%"),
Políticas = c("31.91%"))
head(tabla)
head(tabla)
knitr::kable(head(tabla))
# Indicador operacional 1
indicador_operaciones <- function(input){
suma <- input %>%
summarize(Gasto = (sum(`Citas totales`, na.rm = TRUE)
output <- paste("Respuesta: El valor del indicador es de",
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(estimatr)
library(formattable)
policy <- read_excel("Prueba de Análisis de datos.xlsx", sheet = "Policy")
operaciones <- read_excel("Prueba de Análisis de datos.xlsx", sheet = "Operaciones")
# Indicador operacional 1
indicador_operaciones <- function(input){
suma <- input %>%
summarize(Gasto = (sum(`Citas totales`, na.rm = TRUE)
output <- paste("Respuesta: El valor del indicador es de",
# Indicador operacional 1
indicador_operaciones <- function(input){
suma <- input %>%
summarize(Gasto = sum(`Citas totales`, na.rm=TRUE))
output <- paste("Respuesta: El valor del indicador es de",
suma,
"para el año 2021")
print(output)
}
indicador_operaciones(operaciones)
tabla <- tibble(Año = c("2021"),
Reputacional = c("480"),
Operacional = c("194 o 1.04%"),
Políticas = c("1838 o 31.91%"))
knitr::kable(head(tabla))
# Indicador operacional 1
indicador_operaciones_1 <- function(input){
suma <- input %>%
summarize(Gasto = sum(`Citas totales`, na.rm=TRUE))
output <- paste("Respuesta: El valor del indicador es de",
suma,
"para el año 2021")
print(output)
}
indicador_operaciones_1(operaciones)
# Indicador operacional 2
indicador_operaciones_2 <- function(input){
proporcion <- input %>%
summarize(Gasto = (sum(`Citas Gasto Público` >= 1) / nrow(operaciones)) * 100)
porcentage <- percent(proporcion/100)
output <- paste("Respuesta: El valor del indicador es de",
porcentage,
"para el año 2021")
print(output)
}
indicador_operaciones_2(operaciones)
setwd("C:/Users/cuadr/OneDrive/Escritorio/UCHICAGO/8. Causal Inference/plsc-30600-causal-inference/labs/lab 5")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(estimatr)
library(cobalt)
benchmark <- haven::read_dta("nsw_exper.dta")
lalonde <- haven::read_dta("nsw_psid_withtreated.dta")
lm_robust(re78 ~ nsw, data=benchmark)
lm_robust(re78 ~ nsw, data=lalonde)
# Experimental data
cobalt::bal.tab(benchmark %>% select(age, educ, black, hisp, married, re74, re75, u74, u75), treat=benchmark$nsw, binary="std", sd.denom="pooled")
# Observational data
cobalt::bal.tab(lalonde %>% select(age, educ, black, hisp, married, re74, re75, u74, u75), treat=lalonde$nsw, binary="std", sd.denom="pooled")
# Experimental data
benchmark %>%
group_by(nsw) %>%
summarise(count = n())
# Experimental data
benchmark %>%
group_by(nsw) %>%
summarise(count = n(age))
benchmark %>%
group_by(nsw) %>%
summarise(age = mean(age),
educ = mean(educ),
black = mean(black),
hisp = mean(hisp),
married = mean(married),
re74 = mean(re74),
re75 = mean(re75),
u74 = mean(u74),
u75 = mean(u75))
cobalt::bal.tab(benchmark %>% select(age, educ, black, hisp, married, re74, re75, u74, u75), treat=benchmark$nsw, binary="std", sd.denom="pooled")
lalonde %>%
group_by(nsw) %>%
summarise(age = mean(age),
educ = mean(educ),
black = mean(black),
hisp = mean(hisp),
married = mean(married),
re74 = mean(re74),
re75 = mean(re75),
u74 = mean(u74),
u75 = mean(u75))
cobalt::bal.tab(lalonde %>% select(age, educ, black, hisp, married, re74, re75, u74, u75), treat=lalonde$nsw, binary="std", sd.denom="pooled")
lm_robust(re78 ~ nsw + age + educ + black + hisp + married + re74 + re75 + u74 + u75, data=lalonde)
lalonde %>% ggplot(aes(x=re75, y=re78, colour = as.factor(nsw))) + geom_point() + xlab("Real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw))) + geom_point() + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Linear
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw))) + geom_point(alpha = .1) + geom_smooth(method="lm_robust", formula = y ~ x) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Quadratic
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw))) + geom_point(alpha = .1) + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2)) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
#  Cubic
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw))) + geom_point(alpha = .1) + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2) + I(x^3)) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
View(benchmark)
View(lalonde)
ihs <- function(x) {
y <- log(x + sqrt(x ^ 2 + 1))
return(y)
}
# Linear
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=ihs(re78), colour = as.factor(nsw))) + geom_point(alpha=.1) + geom_smooth(method="lm_robust", formula = y ~ x) + xlab("Transformed real earnings for 1975") + ylab("Transformed real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Quadratic
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=ihs(re78), colour = as.factor(nsw))) + geom_point(alpha=.1)  + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2)) + xlab("Transformed real earnings for 1975") + ylab("Transformed real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
#  Cubic
lalonde %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=ihs(re78), colour = as.factor(nsw))) + geom_point(alpha=.1)  + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2) + I(x^3)) + xlab("Transformed real earnings for 1975") + ylab("Transformed real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 3, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 4, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 10, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 2, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 2, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 1, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 3, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
match_weights = table(c(match_result$index.control, match_result$index.treated))/3
match_weights
match_weights = table(c(match_result$index.control, match_result$index.treated))/3
lalonde$matchweight <- 0
lalonde$matchweight[as.numeric(names(match_weights))] <- match_weights # match_weights is the weight for each row number - this is a quick trick to assign the weights to the right rows
View(lalonde)
match_weights
match_result
summary(match_result)
match_weights = table(c(match_result$index.control, match_result$index.treated))
match_weights
View(match_result)
View(lalonde)
# What's the share of observations with 0 weight
mean(lalonde$matchweight == 0)
# Subset the data to post-matching observations
lalonde_postmatch <- lalonde %>% filter(matchweight != 0)
nrow(lalonde)
nrow(lalonde_postmatch)
nrow(lalonde)
# What's the share of observations with 0 weight
mean(lalonde$matchweight == 0)
nrow(lalonde)
# Scatterplot
lalonde_postmatch %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw), size = matchweight)) + geom_point() +  xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Linear
lalonde_postmatch  %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw), size = matchweight, weight=matchweight)) + geom_point(aes(size=matchweight)) + geom_smooth(method="lm_robust", formula = y ~ x, size=1) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Quadratic
lalonde_postmatch  %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw), size = matchweight, weight=matchweight)) + geom_point(aes(size=matchweight)) + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2), size=1) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Cubic
lalonde_postmatch  %>% filter(u75 == 0) %>% ggplot(aes(x=log(re75), y=re78, colour = as.factor(nsw), size = matchweight, weight=matchweight)) + geom_point(aes(size=matchweight)) + geom_smooth(method="lm_robust", formula = y ~ x + I(x^2) + I(x^3), size=1) + xlab("Transformed real earnings for 1975") + ylab("Real earnings for 1978") + scale_colour_manual("Treatment", values = c("dodgerblue", "darkorange")) + theme_bw()
# Set ties = F to randomly break ties in distances. ties = T will change M to accomodate ties and increase the number of observations used - with lots of covariates, ties are rare so this doesn't matter much here.
# weight = 2: Mahalanobis distance
# M = 3: 3:1 matching, 3 control obs to 1 treated obs
set.seed(60637)
match_result <- Matching::Match(Y = lalonde$re78, Tr = lalonde$nsw, X = lalonde %>% dplyr::select(age, educ, black, hisp, married, re74, re75, u74, u75),
M = 3, Weight = 2, estimand = "ATT", ties = F)
summary(match_result)
View(match_result)
